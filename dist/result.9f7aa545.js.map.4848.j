{"mappings":"ACAA,IAAI,EAAc,SAAS,cAAc,CAAC,eACtC,GACF,EAAY,gBAAgB,CAAC,QAAS,WACpC,IAAI,EAAS,SAAS,aAAa,CAAC,wCAChC,GACF,EAAO,cAAc,CAAC,CAAE,MAAO,OAAQ,EAE3C,GAGF,IAAI,EAAa,SAAS,cAAc,CAAC,cACrC,GACF,EAAW,gBAAgB,CAAC,QAAS,WACnC,IAAI,EAAS,SAAS,aAAa,CACjC,iDAEE,GACF,EAAO,cAAc,CAAC,CAAE,MAAO,OAAQ,EAE3C,GAGF,IAAI,EAAoB,SAAS,cAAc,CAAC,qBAC5C,GACF,EAAkB,gBAAgB,CAAC,QAAS,WAC1C,IAAI,EAAS,SAAS,aAAa,CACjC,8CAEE,GACF,EAAO,cAAc,CAAC,CAAE,MAAO,OAAQ,EAE3C,GAqGF,SAAS,gBAAgB,CAAC,mBA/E1B,WACE,GAAM,CAAE,eAAA,CAAc,CAAE,SAAA,CAAQ,CAAE,KAAA,CAAI,CAAE,CAAG,AAX7C,WACE,IAAM,EAAS,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EACzD,MAAO,CACL,eAAgB,EAAO,GAAG,CAAC,kBAC3B,SAAU,EAAO,GAAG,CAAC,YACrB,KAAM,EAAO,GAAG,CAAC,OACnB,CACF,IAOE,GAFA,QAAQ,GAAG,CAAC,GAER,GAAkB,GAAY,EAAM,CAEtC,IAAM,EAAgB,SAAS,aAAa,CAAC,iBACzC,EACF,EAAc,WAAW,CAAG,CAAC,kCAAkC,EAAE,EAAS,iBAAiB,EAAE,EAAe,IAAI,EAAE,EAAK,CAAC,CAAC,CAEzH,QAAQ,IAAI,CAAC,wDAIf,IAAM,GA9BR,QAAQ,GAAG,CA8BgC,EA9BrB,UACtB,QAAQ,GAAG,CAAC,AA6B+B,EA7BtB,WAAW,GAAG,OAAO,CAAC,KAAM,MAAO,SACjD,AA4BoC,EA5B3B,WAAW,GAAG,OAAO,CAAC,KAAM,OA+B1C,MAAM,4DACH,IAAI,CAAC,AAAC,IAEL,GADA,QAAQ,GAAG,CAAC,kBAAmB,GAC3B,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,+BAElB,OAAO,EAAS,IAAI,EACtB,GACC,IAAI,CAAC,AAAC,IACL,QAAQ,GAAG,CAAC,gBAAiB,EAAM,EAAgB,GAGnD,IAAM,EAAkB,EAAK,MAAM,CACjC,AAAC,GACC,EAAO,cAAc,CAAC,WAAW,KAAO,EAAe,WAAW,IAClE,EAAO,QAAQ,CAAC,WAAW,KAAO,EAAkB,WAAW,IAGnE,QAAQ,GAAG,CAAC,EAAiB,oBAG7B,IAAM,EAAgB,SAAS,aAAa,CAAC,yBACzC,GACF,EAAc,SAAS,CAAG,GAEtB,EAAgB,MAAM,CAAG,EAC3B,EAAgB,OAAO,CAAC,AAAC,IACvB,IAAM,EAAa;A;A;A;A;A;A;AAOQ,yCAAA,EAAE,EAAO,IAAI,CAAC;A;AAEnB,oCAAA,EAAE,EAAO,cAAc,CAAC;AAC5B,gCAAA,EAAE,EAAO,UAAU,CAAC;AACvB,6BAAA,EAAE,EAAO,OAAO,CAAC;AAChB,8BAAA,EAAE,EAAO,QAAQ;A;A;A;AAIzC,MAAA,CAAC,AACO,CAAA,EAAc,SAAS,EAAI,CAC7B,GAEA,EAAc,SAAS,CAAG,sDAG5B,QAAQ,IAAI,CAAC,+DAEjB,GACC,KAAK,CAAC,AAAC,IACN,QAAQ,KAAK,CAAC,uBAAwB,EACxC,EACJ,MACE,QAAQ,IAAI,CAAC,kEAEjB","sources":["<anon>","result.js"],"sourcesContent":["var oURSERVICES = document.getElementById(\"oURSERVICES\");\nif (oURSERVICES) oURSERVICES.addEventListener(\"click\", function() {\n    var anchor = document.querySelector(\"[data-scroll-to='servicesContainer']\");\n    if (anchor) anchor.scrollIntoView({\n        block: \"start\"\n    });\n});\nvar dEPARTMENT = document.getElementById(\"dEPARTMENT\");\nif (dEPARTMENT) dEPARTMENT.addEventListener(\"click\", function() {\n    var anchor = document.querySelector(\"[data-scroll-to='departmentSectionContainer']\");\n    if (anchor) anchor.scrollIntoView({\n        block: \"start\"\n    });\n});\nvar bookAnAppointment = document.getElementById(\"bookAnAppointment\");\nif (bookAnAppointment) bookAnAppointment.addEventListener(\"click\", function() {\n    var anchor = document.querySelector(\"[data-scroll-to='bookAnAppointmentButton']\");\n    if (anchor) anchor.scrollIntoView({\n        block: \"start\"\n    });\n});\n// Function to format the location for API params\nfunction formatLocation(location) {\n    // Convert the location to lowercase and replace spaces with hyphens\n    console.log(location, \"before\");\n    console.log(location.toLowerCase().replace(/-/g, ', '), \"after\");\n    return location.toLowerCase().replace(/-/g, ', ');\n}\n// Function to parse query parameters\nfunction getQueryParams() {\n    const params = new URLSearchParams(window.location.search);\n    return {\n        specialization: params.get(\"specialization\"),\n        location: params.get(\"location\"),\n        date: params.get(\"date\")\n    };\n}\n// Display results based on query params\nfunction displayResults() {\n    const { specialization, location, date } = getQueryParams();\n    console.log(location);\n    if (specialization && location && date) {\n        // Update header text\n        const headerElement = document.querySelector(\".we-found-the\");\n        if (headerElement) headerElement.textContent = `We found the following doctors in ${location} specializing in ${specialization} on ${date}.`;\n        else console.warn(\"Header element with class '.we-found-the' not found.\");\n        // Format the location\n        const formattedLocation = formatLocation(location);\n        // Fetch data and filter based on specialization and location\n        fetch(\"https://mocki.io/v1/6628d024-ad17-415e-9f50-f3ae6718676a\").then((response)=>{\n            console.log(\"Fetch Response:\", response);\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            return response.json();\n        }).then((data)=>{\n            console.log(\"Fetched Data:\", data, specialization, formattedLocation);\n            // Filter doctors based on specialization and formatted location\n            const filteredDoctors = data.filter((doctor)=>doctor.specialization.toLowerCase() === specialization.toLowerCase() && doctor.location.toLowerCase() === formattedLocation.toLowerCase());\n            console.log(filteredDoctors, \"Filtered Doctors\");\n            // Display filtered doctors\n            const doctorSection = document.querySelector(\".how-to-work-section1\");\n            if (doctorSection) {\n                doctorSection.innerHTML = \"\"; // Clear previous content\n                if (filteredDoctors.length > 0) filteredDoctors.forEach((doctor)=>{\n                    const doctorCard = `\n              <div class=\"how-to-work-section1\">\n\n                <div class=\"doctor\">\n                  <div class=\"doctor-bg1\">\n                  <img class=\"doctor-icon1\" alt=\"Doctor\" src=\"./public/doctor@2x.png\" />\n                  </div>\n                  <b class=\"doctor-name\">${doctor.name}</b>\n                  <div class=\"doctor-information\">\n                    Specialization: ${doctor.specialization}<br>\n                    Experience: ${doctor.experience} years<br>\n                    Contact: ${doctor.contact}<br>\n                    Location: ${doctor.location}\n                  </div>\n                </div>\n      </div>\n      `;\n                    doctorSection.innerHTML += doctorCard;\n                });\n                else doctorSection.innerHTML = `<p>No doctors found for the selected criteria.</p>`;\n            } else console.warn(\"Doctor section with class '.how-to-work-section1' not found.\");\n        }).catch((error)=>{\n            console.error(\"Error fetching data:\", error);\n        });\n    } else console.warn(\"Specialization, location, or date not provided in query params.\");\n}\n// Run on page load\ndocument.addEventListener(\"DOMContentLoaded\", displayResults);\n\n//# sourceMappingURL=result.9f7aa545.js.map\n","var oURSERVICES = document.getElementById(\"oURSERVICES\");\nif (oURSERVICES) {\n  oURSERVICES.addEventListener(\"click\", function () {\n    var anchor = document.querySelector(\"[data-scroll-to='servicesContainer']\");\n    if (anchor) {\n      anchor.scrollIntoView({ block: \"start\" });\n    }\n  });\n}\n\nvar dEPARTMENT = document.getElementById(\"dEPARTMENT\");\nif (dEPARTMENT) {\n  dEPARTMENT.addEventListener(\"click\", function () {\n    var anchor = document.querySelector(\n      \"[data-scroll-to='departmentSectionContainer']\"\n    );\n    if (anchor) {\n      anchor.scrollIntoView({ block: \"start\" });\n    }\n  });\n}\n\nvar bookAnAppointment = document.getElementById(\"bookAnAppointment\");\nif (bookAnAppointment) {\n  bookAnAppointment.addEventListener(\"click\", function () {\n    var anchor = document.querySelector(\n      \"[data-scroll-to='bookAnAppointmentButton']\"\n    );\n    if (anchor) {\n      anchor.scrollIntoView({ block: \"start\" });\n    }\n  });\n}\n\n// Function to format the location for API params\nfunction formatLocation(location) {\n  // Convert the location to lowercase and replace spaces with hyphens\n  console.log(location, \"before\")\n  console.log(location.toLowerCase().replace(/-/g, ', '), \"after\")\n  return location.toLowerCase().replace(/-/g, ', ');\n}\n\n// Function to parse query parameters\nfunction getQueryParams() {\n  const params = new URLSearchParams(window.location.search);\n  return {\n    specialization: params.get(\"specialization\"),\n    location: params.get(\"location\"),\n    date: params.get(\"date\"),\n  };\n}\n\n// Display results based on query params\nfunction displayResults() {\n  const { specialization, location, date } = getQueryParams();\n  console.log(location)\n\n  if (specialization && location && date) {\n    // Update header text\n    const headerElement = document.querySelector(\".we-found-the\");\n    if (headerElement) {\n      headerElement.textContent = `We found the following doctors in ${location} specializing in ${specialization} on ${date}.`;\n    } else {\n      console.warn(\"Header element with class '.we-found-the' not found.\");\n    }\n\n    // Format the location\n    const formattedLocation = formatLocation(location);\n\n    // Fetch data and filter based on specialization and location\n    fetch(\"https://mocki.io/v1/6628d024-ad17-415e-9f50-f3ae6718676a\")\n      .then((response) => {\n        console.log(\"Fetch Response:\", response);\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        console.log(\"Fetched Data:\", data, specialization, formattedLocation);\n\n        // Filter doctors based on specialization and formatted location\n        const filteredDoctors = data.filter(\n          (doctor) =>\n            doctor.specialization.toLowerCase() === specialization.toLowerCase() &&\n            doctor.location.toLowerCase() === formattedLocation.toLowerCase()\n        );\n\n        console.log(filteredDoctors, \"Filtered Doctors\");\n\n        // Display filtered doctors\n        const doctorSection = document.querySelector(\".how-to-work-section1\");\n        if (doctorSection) {\n          doctorSection.innerHTML = \"\"; // Clear previous content\n\n          if (filteredDoctors.length > 0) {\n            filteredDoctors.forEach((doctor) => {\n              const doctorCard = `\n              <div class=\"how-to-work-section1\">\n\n                <div class=\"doctor\">\n                  <div class=\"doctor-bg1\">\n                  <img class=\"doctor-icon1\" alt=\"Doctor\" src=\"./public/doctor@2x.png\" />\n                  </div>\n                  <b class=\"doctor-name\">${doctor.name}</b>\n                  <div class=\"doctor-information\">\n                    Specialization: ${doctor.specialization}<br>\n                    Experience: ${doctor.experience} years<br>\n                    Contact: ${doctor.contact}<br>\n                    Location: ${doctor.location}\n                  </div>\n                </div>\n      </div>\n      `;\n              doctorSection.innerHTML += doctorCard;\n            });\n          } else {\n            doctorSection.innerHTML = `<p>No doctors found for the selected criteria.</p>`;\n          }\n        } else {\n          console.warn(\"Doctor section with class '.how-to-work-section1' not found.\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  } else {\n    console.warn(\"Specialization, location, or date not provided in query params.\");\n  }\n}\n\n// Run on page load\ndocument.addEventListener(\"DOMContentLoaded\", displayResults);\n"],"names":["oURSERVICES","document","getElementById","addEventListener","anchor","querySelector","scrollIntoView","block","dEPARTMENT","bookAnAppointment","specialization","location","date","getQueryParams","params","URLSearchParams","window","search","get","console","log","headerElement","textContent","warn","formattedLocation","toLowerCase","replace","fetch","then","response","ok","Error","json","data","filteredDoctors","filter","doctor","doctorSection","innerHTML","length","forEach","doctorCard","name","experience","contact","catch","error"],"version":3,"file":"result.9f7aa545.js.map"}