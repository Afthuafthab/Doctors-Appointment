{"mappings":"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","sources":["script.js"],"sourcesContent":["/*\n=================================================================\n VDoctor - Local Storage Authentication & Homepage Logic\n=================================================================\n This file handles all client-side logic for the VDoctor project.\n It uses the browser's localStorage for user authentication,\n removing the need for a backend service like Firebase for this feature.\n\n Features:\n - User Registration (stores user data locally)\n - User Login (checks credentials against local data)\n - Session Management (maintains login state across pages)\n - Dynamic Navbar (shows Login/Register or Logout)\n - Doctor Search/Filter\n - Testimonial Slider\n=================================================================\n*/\n\n/**\n * Displays a message in a designated message container.\n * @param {string} message - The message to display.\n * @param {boolean} isError - True if the message is an error, false for success.\n */\nconst showMessage = (message, isError = false) => {\n    const messageContainer = document.getElementById('message-container');\n    if (!messageContainer) return;\n\n    messageContainer.textContent = message;\n    messageContainer.className = 'message-container'; // Reset classes\n    if (isError) {\n        messageContainer.classList.add('error');\n    } else {\n        messageContainer.classList.add('success');\n    }\n    messageContainer.style.display = 'block';\n};\n\n/**\n * Toggles the loading spinner visibility on a button.\n * @param {HTMLButtonElement} button - The button element.\n * @param {boolean} isLoading - True to show the spinner, false to hide it.\n */\nconst toggleLoading = (button, isLoading) => {\n    if (!button) return;\n    const btnText = button.querySelector('.btn-text');\n    const spinner = button.querySelector('.spinner');\n\n    if (isLoading) {\n        btnText.style.display = 'none';\n        spinner.style.display = 'block';\n        button.disabled = true;\n    } else {\n        btnText.style.display = 'inline';\n        spinner.style.display = 'none';\n        button.disabled = false;\n    }\n};\n\n// --- AUTHENTICATION LOGIC ---\n// Moved inside DOMContentLoaded below\n\n/**\n * Checks auth state from localStorage and updates the navbar accordingly.\n */\nconst checkAuthState = () => {\n    const authLinksContainer = document.getElementById('auth-links');\n    if (!authLinksContainer) return;\n\n    const user = JSON.parse(localStorage.getItem('vdoctor_currentUser'));\n\n    if (user) {\n        // User is signed in\n        authLinksContainer.innerHTML = `\n            <button id=\"logout-btn\" class=\"btn btn-secondary nav-btn\">LOGOUT</button>\n        `;\n        const logoutBtn = document.getElementById('logout-btn');\n        logoutBtn?.addEventListener('click', async () => {\n            localStorage.removeItem('vdoctor_currentUser');\n            window.location.reload();\n        });\n    } else {\n        // User is signed out\n        authLinksContainer.innerHTML = `\n            <a href=\"login.html\" class=\"btn btn-secondary nav-btn\">LOGIN</a>\n            <a href=\"register.html\" class=\"btn btn-secondary nav-btn\">REGISTER</a>\n        `;\n    }\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Always check the authentication state on any page that loads this script.\n    checkAuthState();\n\n    // Handle Registration\n    const registerForm = document.getElementById('register-form');\n    if (registerForm) {\n        registerForm.addEventListener('submit', (e) => {\n            e.preventDefault();\n            const button = registerForm.querySelector('button[type=\"submit\"]');\n            toggleLoading(button, true);\n\n            const fullName = document.getElementById('fullName').value.trim();\n            const email = document.getElementById('email').value.trim().toLowerCase();\n            const password = document.getElementById('password').value.trim();\n\n            // Get existing users from localStorage or initialize an empty array\n            const users = JSON.parse(localStorage.getItem('vdoctor_users')) || [];\n\n            // Check if user already exists (case-insensitive email)\n            const userExists = users.some(user => user.email.toLowerCase() === email);\n\n            if (userExists) {\n                showMessage('An account with this email already exists.', true);\n                toggleLoading(button, false);\n            } else {\n                // Add new user\n                users.push({ fullName, email, password });\n                localStorage.setItem('vdoctor_users', JSON.stringify(users));\n\n                showMessage('Registration successful! Redirecting to login...', false);\n                setTimeout(() => window.location.href = 'login.html', 2000);\n            }\n        });\n    }\n\n    // Handle Login\n    const loginForm = document.getElementById('login-form');\n    if (loginForm) {\n        loginForm.addEventListener('submit', (e) => {\n            e.preventDefault();\n            const button = loginForm.querySelector('button[type=\"submit\"]');\n            toggleLoading(button, true);\n\n            const email = document.getElementById('email').value.trim().toLowerCase();\n            const password = document.getElementById('password').value.trim();\n\n            const users = JSON.parse(localStorage.getItem('vdoctor_users')) || [];\n\n            // Find user with matching credentials (case-insensitive email)\n            const user = users.find(u => u.email.toLowerCase() === email && u.password === password);\n\n            if (user) {\n                // Store current user's info to simulate a session\n                localStorage.setItem('vdoctor_currentUser', JSON.stringify({ email: user.email, fullName: user.fullName }));\n                showMessage('Login successful! Redirecting...', false);\n                setTimeout(() => window.location.href = 'index.html', 1500);\n            } else {\n                showMessage('Invalid email or password.', true);\n                toggleLoading(button, false);\n            }\n        });\n    }\n\n\n\n    // Expanded Symptom to Specialty Mapping with more comprehensive keywords\n    const symptomMapping = {\n        // Cardiologist\n        'chest': 'Consult with a Cardiologist',\n        'heart': 'Consult with a Cardiologist',\n        'palpitations': 'Consult with a Cardiologist',\n        'shortness': 'Consult with a Cardiologist',\n        'breath': 'Consult with a Cardiologist',\n        'cardiac': 'Consult with a Cardiologist',\n        'hypertension': 'Consult with a Cardiologist',\n        'blood pressure': 'Consult with a Cardiologist',\n\n        // Dermatologist\n        'skin': 'Consult with a Dermatologist',\n        'rash': 'Consult with a Dermatologist',\n        'acne': 'Consult with a Dermatologist',\n        'eczema': 'Consult with a Dermatologist',\n        'hair': 'Consult with a Dermatologist',\n        'loss': 'Consult with a Dermatologist',\n        'dermatitis': 'Consult with a Dermatologist',\n        'psoriasis': 'Consult with a Dermatologist',\n\n        // Dentist\n        'tooth': 'Consult with a Dentist',\n        'teeth': 'Consult with a Dentist',\n        'dental': 'Consult with a Dentist',\n        'mouth': 'Consult with a Dentist',\n        'gum': 'Consult with a Dentist',\n        'cavity': 'Consult with a Dentist',\n        'pain': 'Consult with a Dentist', // Note: This might conflict, but context matters\n\n        // Neurology\n        'headache': 'Consult with a Neurologist',\n        'migraine': 'Consult with a Neurologist',\n        'dizziness': 'Consult with a Neurologist',\n        'seizure': 'Consult with a Neurologist',\n        'neurological': 'Consult with a Neurologist',\n        'brain': 'Consult with a Neurologist',\n        'numbness': 'Consult with a Neurologist',\n\n        // Pediatrics\n        'child': 'Consult with a Pediatrician',\n        'baby': 'Consult with a Pediatrician',\n        'pediatric': 'Consult with a Pediatrician',\n        'vaccination': 'Consult with a Pediatrician',\n        'fever': 'Consult with a Pediatrician', // Children specific\n        'growth': 'Consult with a Pediatrician',\n\n        // Gynecology\n        'pregnancy': 'Consult with a Gynecologist',\n        'menstrual': 'Consult with a Gynecologist',\n        'gynecological': 'Consult with a Gynecologist',\n        'women': 'Consult with a Gynecologist',\n        'female': 'Consult with a Gynecologist',\n        'period': 'Consult with a Gynecologist',\n\n        // Orthopedics\n        'joint': 'Consult with an Orthopedic Surgeon',\n        'back': 'Consult with an Orthopedic Surgeon',\n        'bone': 'Consult with an Orthopedic Surgeon',\n        'fracture': 'Consult with an Orthopedic Surgeon',\n        'arthritis': 'Consult with an Orthopedic Surgeon',\n        'knee': 'Consult with an Orthopedic Surgeon',\n        'shoulder': 'Consult with an Orthopedic Surgeon',\n\n        // Urology\n        'urinary': 'Consult with a Urologist',\n        'kidney': 'Consult with a Urologist',\n        'bladder': 'Consult with a Urologist',\n        'prostate': 'Consult with a Urologist',\n        'urine': 'Consult with a Urologist',\n\n        // General Medicine\n        'stomach': 'Consult with a General Physician',\n        'cough': 'Consult with a General Physician',\n        'cold': 'Consult with a General Physician',\n        'fever': 'Consult with a General Physician',\n        'general': 'Consult with a General Physician'\n    };\n\n    // Function to check symptoms and suggest specialties\n    const checkSymptoms = () => {\n        const symptomsInput = document.getElementById('symptoms-input');\n        const symptomResults = document.getElementById('symptom-results');\n        const suggestedSpecialties = document.getElementById('suggested-specialties');\n\n        if (!symptomsInput || !symptomResults || !suggestedSpecialties) return;\n\n        const symptoms = symptomsInput.value.trim().toLowerCase();\n        if (!symptoms) {\n            suggestedSpecialties.innerHTML = '<li>Please enter some symptoms.</li>';\n            symptomResults.style.display = 'block';\n            return;\n        }\n\n        const words = symptoms.split(/\\s+/);\n        const suggestions = new Set();\n\n        words.forEach(word => {\n            if (symptomMapping[word]) {\n                suggestions.add(symptomMapping[word]);\n            }\n        });\n\n        if (suggestions.size > 0) {\n            suggestedSpecialties.innerHTML = '';\n            suggestions.forEach(suggestion => {\n                const li = document.createElement('li');\n                li.textContent = suggestion;\n                suggestedSpecialties.appendChild(li);\n            });\n        } else {\n            suggestedSpecialties.innerHTML = '<li>No specific specialty suggested. Please consult a General Physician.</li>';\n        }\n\n        symptomResults.style.display = 'block';\n    };\n\n    // Event listener for symptom checker button\n    const checkSymptomsBtn = document.getElementById('check-symptoms-btn');\n    if (checkSymptomsBtn) {\n        checkSymptomsBtn.addEventListener('click', checkSymptoms);\n    }\n\n    // Event listener for search suggested button\n    const searchSuggestedBtn = document.getElementById('search-suggested-btn');\n    if (searchSuggestedBtn) {\n        searchSuggestedBtn.addEventListener('click', () => {\n            const suggestedItems = document.querySelectorAll('#suggested-specialties li');\n            if (suggestedItems.length > 0) {\n                const firstSpecialty = suggestedItems[0].textContent;\n                // Extract specialty from \"Consult with a [Specialty]\"\n                const specialtyMatch = firstSpecialty.match(/Consult with a (.+)/);\n                const specialty = specialtyMatch ? specialtyMatch[1] : firstSpecialty;\n\n                const specializationSearch = document.getElementById('specialization-search');\n                const locationSearch = document.getElementById('location-search');\n\n                if (specializationSearch) {\n                    specializationSearch.value = specialty;\n                }\n\n                // Set default location if not set\n                if (locationSearch && !locationSearch.value) {\n                    locationSearch.value = 'USA'; // Default location\n                }\n\n                // Trigger search\n                const searchBtn = document.getElementById('search-btn');\n                if (searchBtn) {\n                    searchBtn.click();\n                }\n            }\n        });\n    }\n\n    // Testimonial Slider Logic\n    const testimonials = [{\n            quote: \"VDoctor made booking a consultation so easy. The virtual consultation saved me so much time!\",\n            author: \"Jennifer Robinson, LELEANDM USA\",\n            image: \"https://picsum.photos/200/200?random=1\"\n        },\n        {\n            quote: \"The doctors are highly professional and caring. I had a wonderful experience and would highly recommend this platform.\",\n            author: \"John Doe, HealthFirst UK\",\n            image: \"https://picsum.photos/200/200?random=2\"\n        },\n        {\n            quote: \"A seamless and efficient way to get medical advice. The platform is user-friendly and the service is top-notch.\",\n            author: \"Priya Sharma, MediConnect India\",\n            image: \"https://picsum.photos/200/200?random=3\"\n        }\n    ];\n\n    const sliderContainer = document.querySelector('.testimonial-card-container');\n    const nextBtn = document.querySelector('.next-btn');\n    const prevBtn = document.querySelector('.prev-btn');\n    let currentSlide = 0;\n\n    const renderTestimonials = () => {\n        if (!sliderContainer) return;\n        sliderContainer.innerHTML = '';\n        testimonials.forEach((t, index) => {\n            const card = document.createElement('div');\n            card.classList.add('testimonial-card');\n            if (index === currentSlide) {\n                card.classList.add('active');\n            }\n            card.innerHTML = `\n                <div class=\"testimonial-profile\">\n                    <img src=\"${t.image}\" alt=\"${t.author}\" class=\"testimonial-avatar\">\n                    <div class=\"testimonial-info\">\n                        <p class=\"testimonial-quote\">\"${t.quote}\"</p>\n                        <p class=\"testimonial-author\">- ${t.author}</p>\n                    </div>\n                </div>\n            `;\n            sliderContainer.appendChild(card);\n        });\n    };\n\n    const showSlide = (index) => {\n        const slides = document.querySelectorAll('.testimonial-card');\n        if (index >= slides.length) {\n            currentSlide = 0;\n        } else if (index < 0) {\n            currentSlide = slides.length - 1;\n        } else {\n            currentSlide = index;\n        }\n        slides.forEach(slide => slide.classList.remove('active'));\n        slides[currentSlide].classList.add('active');\n    };\n\n    if (nextBtn && prevBtn) {\n        renderTestimonials(); // Initial render\n\n        nextBtn.addEventListener('click', () => {\n            showSlide(currentSlide + 1);\n        });\n\n        prevBtn.addEventListener('click', () => {\n            showSlide(currentSlide - 1);\n        });\n    }\n\n    // Floating Chatbot Logic\n    const chatIcon = document.getElementById('chat-icon');\n    const chatWindow = document.getElementById('chat-window');\n    const closeChat = document.getElementById('close-chat');\n    const chatMessages = document.getElementById('chat-messages');\n    const chatInput = document.getElementById('chat-input');\n    const sendBtn = document.getElementById('send-btn');\n\n    // Toggle chat window\n    if (chatIcon) {\n        chatIcon.addEventListener('click', () => {\n            chatWindow.style.display = chatWindow.style.display === 'none' ? 'flex' : 'none';\n        });\n    }\n\n    if (closeChat) {\n        closeChat.addEventListener('click', () => {\n            chatWindow.style.display = 'none';\n        });\n    }\n\n    // Medical Q&A Knowledge Base\n    const medicalResponses = {\n        'hello': 'Hello! How can I help you with your health questions today?',\n        'hi': 'Hi there! I\\'m here to answer your medical questions. What would you like to know?',\n        'headache': 'Headaches can have many causes including stress, dehydration, lack of sleep, or medical conditions. If persistent or severe, consult a doctor. Try resting in a dark room and staying hydrated.',\n        'fever': 'A fever is your body\\'s natural response to infection. Rest, stay hydrated, and monitor your temperature. If over 103°F (39.4°C) or lasting more than 3 days, see a doctor.',\n        'cough': 'Coughs can be caused by colds, allergies, or infections. Stay hydrated, use honey for soothing, and rest. If persistent with chest pain or shortness of breath, consult a healthcare provider.',\n        'stomach pain': 'Stomach pain can result from indigestion, gas, or more serious conditions. Try eating smaller meals and avoiding trigger foods. If severe or persistent, seek medical attention.',\n        'blood pressure': 'Blood pressure measures the force of blood against artery walls. Normal is less than 120/80 mmHg. High blood pressure often has no symptoms but can lead to serious health issues.',\n        'diabetes': 'Diabetes is a condition where blood sugar levels are too high. Type 1 is autoimmune, Type 2 is lifestyle-related. Management includes diet, exercise, and sometimes medication.',\n        'heart disease': 'Heart disease includes conditions affecting the heart. Risk factors include high blood pressure, high cholesterol, smoking, and family history. Prevention focuses on healthy lifestyle.',\n        'cancer': 'Cancer is abnormal cell growth that can spread. Early detection is crucial. Risk factors vary by type, but include genetics, lifestyle, and environmental factors.',\n        'vaccines': 'Vaccines help prevent infectious diseases by stimulating immunity. They\\'re safe and effective. Consult your doctor about recommended vaccinations for your age and health conditions.',\n        'mental health': 'Mental health is as important as physical health. Common conditions include anxiety and depression. Therapy, medication, and lifestyle changes can help. Don\\'t hesitate to seek professional help.',\n        'exercise': 'Regular exercise improves cardiovascular health, strengthens muscles, and boosts mental health. Aim for 150 minutes of moderate activity per week.',\n        'diet': 'A balanced diet includes fruits, vegetables, whole grains, lean proteins, and healthy fats. Limit processed foods, sugar, and salt. Stay hydrated and eat mindfully.',\n        'sleep': 'Adults need 7-9 hours of quality sleep per night. Poor sleep can affect mood, immunity, and cognitive function. Maintain a consistent sleep schedule.',\n        'stress': 'Stress is normal but chronic stress can harm health. Practice relaxation techniques like deep breathing, meditation, or yoga. Seek support when needed.',\n        'emergency': 'For medical emergencies, call emergency services immediately (911 in US). Signs include chest pain, difficulty breathing, severe bleeding, or loss of consciousness.',\n        'appointment': 'To book an appointment, use our search feature to find doctors by specialty and location, then click \"Book Appointment\" on their profile.',\n        'symptoms': 'Our AI Symptom Checker can help suggest medical specialties based on your symptoms. Try describing what you\\'re experiencing.',\n        'default': 'I\\'m here to help with general health information. For personalized medical advice, please consult a qualified healthcare professional. What specific health topic would you like to know about?'\n    };\n\n    const addMessage = (message, isUser = false) => {\n        const messageDiv = document.createElement('div');\n        messageDiv.classList.add('message');\n        if (isUser) {\n            messageDiv.classList.add('user-message');\n        } else {\n            messageDiv.classList.add('bot-message');\n        }\n\n        messageDiv.innerHTML = `\n            <div class=\"message-avatar\">\n                ${isUser ? '<i class=\"fas fa-user\"></i>' : '<i class=\"fas fa-robot\"></i>'}\n            </div>\n            <div class=\"message-content\">\n                <p>${message}</p>\n            </div>\n        `;\n\n        chatMessages.appendChild(messageDiv);\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n    };\n\n    const getBotResponse = (userMessage) => {\n        const message = userMessage.toLowerCase().trim();\n\n        // Check for exact matches first\n        if (medicalResponses[message]) {\n            return medicalResponses[message];\n        }\n\n        // Check for keywords in the message\n        for (const [key, response] of Object.entries(medicalResponses)) {\n            if (key !== 'default' && message.includes(key)) {\n                return response;\n            }\n        }\n\n        // Default response\n        return medicalResponses['default'];\n    };\n\n    const handleSendMessage = () => {\n        const message = chatInput.value.trim();\n        if (!message) return;\n\n        addMessage(message, true);\n        chatInput.value = '';\n\n        // Simulate typing delay\n        setTimeout(() => {\n            const response = getBotResponse(message);\n            addMessage(response);\n        }, 500);\n    };\n\n    if (sendBtn && chatInput) {\n        sendBtn.addEventListener('click', handleSendMessage);\n        chatInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                handleSendMessage();\n            }\n        });\n    }\n\n    // Only run this logic on the homepage\n    if (document.getElementById('doctor-grid')) {\n        // Doctor Data - Limited to 3 best doctors with high ratings\n        const doctors = [\n            {\n                name: 'Dr. Mehnaz',\n                specialization: 'Cardiologist',\n                location: 'Canada',\n                availableDates: ['2024-10-15', '2024-10-16', '2024-10-17'],\n                image: 'public/448fb44937b4973fffc5202effb13d3c91eae9c7@2x.png',\n                rating: 5.0\n            },\n            {\n                name: 'Dr. Emily Carter',\n                specialization: 'Cardiologist',\n                location: 'USA',\n                availableDates: ['2024-10-18', '2024-10-19', '2024-10-20'],\n                image: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=250&h=250&q=80',\n                rating: 4.9\n            },\n            {\n                name: 'Dr. Michael Lee',\n                specialization: 'Cardiologist',\n                location: 'UK',\n                availableDates: ['2024-10-21', '2024-10-22', '2024-10-23'],\n                image: 'https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=250&h=250&q=80',\n                rating: 4.8\n            },\n        ];\n\n        const doctorGrid = document.getElementById('doctor-grid');\n        const noResultsMessage = document.getElementById('no-results-message');\n\n        // Function to render doctors\n        const renderDoctors = (filteredDoctors) => {\n            doctorGrid.innerHTML = '';\n            filteredDoctors.forEach(doc => {\n                const doctorCard = `\n                    <div class=\"doctor-card\">\n                        <img src=\"${doc.image}\" alt=\"${doc.name}\" class=\"doctor-image\">\n                        <div class=\"doctor-info\">\n                            <h3 class=\"doctor-name\">${doc.name}</h3>\n                            <p class=\"doctor-specialization\">${doc.specialization}</p>\n                            <p class=\"doctor-location\">${doc.location}</p>\n                            <p class=\"doctor-rating\">Rating: ${doc.rating} <i class=\"fa-solid fa-star\"></i></p>\n                            <p class=\"doctor-availability\">Available: ${doc.availableDates.join(', ')}</p>\n                            <button class=\"btn btn-primary book-btn\" data-doctor=\"${doc.name}\">Book Appointment</button>\n                        </div>\n                    </div>\n                `;\n                doctorGrid.innerHTML += doctorCard;\n            });\n\n            // Add event listeners to book buttons\n            const bookButtons = document.querySelectorAll('.book-btn');\n            bookButtons.forEach(button => {\n                button.addEventListener('click', (e) => {\n                    const doctorName = e.target.getAttribute('data-doctor');\n                    const doctor = doctors.find(d => d.name === doctorName);\n                    if (doctor) {\n                        // Redirect to Google Form with pre-filled data if possible\n                        const formUrl = `https://forms.gle/5wWvhfe4NNLit21A7?usp=pp_url&entry.123456789=${encodeURIComponent(doctorName)}`;\n                        window.open(formUrl, '_blank');\n                    }\n                });\n            });\n\n            if (filteredDoctors.length === 0) {\n                noResultsMessage.style.display = 'block';\n            } else {\n                noResultsMessage.style.display = 'none';\n            }\n        };\n\n        // Initial render\n        if (doctorGrid) {\n            renderDoctors(doctors);\n        }\n\n        // Search/Filter Logic\n        const searchForm = document.getElementById('doctor-search-form');\n        const specializationSearch = document.getElementById('specialization-search');\n        const locationSearch = document.getElementById('location-search');\n        const dateSearch = document.getElementById('date-search');\n\n        const filterDoctors = (e) => {\n            e.preventDefault(); // Prevent form submission\n            const specQuery = specializationSearch.value.toLowerCase();\n            const locQuery = locationSearch.value.toLowerCase();\n            const dateQuery = dateSearch.value;\n\n            const filtered = doctors.filter(doc => {\n                // If query is empty, it's a match. Otherwise, check for inclusion.\n                const matchesSpec = specQuery === '' || doc.specialization.toLowerCase().includes(specQuery);\n                const matchesLoc = locQuery === '' || doc.location.toLowerCase().includes(locQuery);\n                const matchesDate = dateQuery === '' || doc.availableDates.includes(dateQuery);\n                return matchesSpec && matchesLoc && matchesDate;\n            });\n            renderDoctors(filtered);\n        };\n\n        const searchBtn = document.getElementById('search-btn');\n        if (searchBtn) {\n            searchBtn.addEventListener('click', () => {\n                const specialization = specializationSearch.value;\n                const location = locationSearch.value;\n                const date = dateSearch.value;\n\n                const params = new URLSearchParams();\n                if (specialization) params.append('specialization', specialization);\n                if (location) params.append('location', location);\n                if (date) params.append('date', date);\n\n                window.location.href = `result.html?${params.toString()}`;\n            });\n        }\n\n        if (searchForm) {\n            searchForm.addEventListener('submit', filterDoctors);\n            // Also filter on change for a more interactive feel\n            specializationSearch.addEventListener('change', (e) => filterDoctors(e));\n            locationSearch.addEventListener('change', (e) => filterDoctors(e));\n            dateSearch.addEventListener('change', (e) => filterDoctors(e));\n        }\n    }\n});\n"],"names":[],"version":3,"file":"health-records.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}